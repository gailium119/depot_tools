{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "de49628a_581e85bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1303432
      },
      "writtenOn": "2025-01-10T00:24:55Z",
      "side": 1,
      "message": "Tests for this change would also be good. I appreciate you thinking about how we could improve git cl split and just proactively working to do it!",
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31108e8a_13c91814",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3481761
      },
      "writtenOn": "2025-01-14T20:57:51Z",
      "side": 1,
      "message": "We didn\u0027t have any existing way to test the SplitCl function, so added a class for doing that. The class actually caught the bug fixed in crrev.com/c/6170638!",
      "parentUuid": "de49628a_581e85bf",
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e0b3f60_8c155922",
        "filename": "split_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 304,
      "author": {
        "id": 1303432
      },
      "writtenOn": "2025-01-10T00:24:55Z",
      "side": 1,
      "message": "This will now print no information during a dry run where before it would have given basic info on # of CLs in split. I think we should probably print the summary in all modes even if we only prompt for proceeding in normal (non-dry) runs.",
      "fixSuggestions": [
        {
          "fixId": "b998a4a8_4b27e2d9",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "split_cl.py",
              "range": {
                "startLine": 303,
                "startChar": 0,
                "endLine": 303,
                "endChar": 0
              },
              "replacement": "        PrintSummary(files_split_by_reviewers)\n\n"
            },
            {
              "path": "split_cl.py",
              "range": {
                "startLine": 304,
                "startChar": 0,
                "endLine": 305,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3625263_9541a7f0",
        "filename": "split_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 304,
      "author": {
        "id": 3481761
      },
      "writtenOn": "2025-01-14T20:57:51Z",
      "side": 1,
      "message": "Dry runs still print detailed information about each CL it was split into (via PrintClInfo). It\u0027s got all the information in the summary, so I don\u0027t think we need to print the summary as well.",
      "parentUuid": "9e0b3f60_8c155922",
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "426212d0_2a66f69d",
        "filename": "split_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 304,
      "author": {
        "id": 1303432
      },
      "writtenOn": "2025-01-21T23:10:34Z",
      "side": 1,
      "message": "SG",
      "parentUuid": "a3625263_9541a7f0",
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3fdcf3f_c59fb754",
        "filename": "split_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1303432
      },
      "writtenOn": "2025-01-10T00:24:55Z",
      "side": 1,
      "message": "I\u0027m a little conflicted on this change but I am not a git cl split user either. I like the idea of people being sure they want the specific split but we\u0027re adding friction where I haven\u0027t seen a _ton_ of complaints on the existing behavior either.\n\nI\u0027d like the opinion of some of the other depot_tools OWNERS (or Chromies at large). People can always use dry run if they want to check the split (my other idea was maybe gate this on a new flag, something like -i(nteractive), on par with other linux commands but I don\u0027t think it\u0027s quite the standard interactive behavior and dry run should be sufficient). \n\nEither way I think the improvements in printing the split could be useful. I could be convinced to take this patch though if others are supportive.",
      "fixSuggestions": [
        {
          "fixId": "f643df96_94666421",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "split_cl.py",
              "range": {
                "startLine": 305,
                "startChar": 0,
                "endLine": 308,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "099d79c3_872cecd2",
        "filename": "split_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 3481761
      },
      "writtenOn": "2025-01-14T20:57:51Z",
      "side": 1,
      "message": "Yes, this is definitely not frictionless, so it makes sense to get a few more opinions. My reasoning for changing it is below:\n\n1. I\u0027m very hesitant to let scripts made significant decisions on my behalf without supervision (in this case, uploading CLs, triggering CQ runs, notifying reviewers).\n2. The splitting algorithm is nondeterministic, so I can\u0027t trust that it will do the same thing as on a dry run.\n3. If something is wrong with the split, we\u0027d much prefer users notice before they start making visible changes (uploading and notifying people), instead of canceling it halfway through.\n4. The additional friction isn\u0027t much, especially since they were already going to run into a confirmation prompt if the split involved more than 10 CLs, which is pretty common.\n\nFor (3), it would have caught at least some of the problems with crbug.com/388990264, and saved crbug.com/40642562 from having to cancel the process manually. The latter bug also requested this behavior, as did crbug.com/40269201.\n\nI\u0027m also planning future improvements to `git cl split` which would benefit from this, e.g. sifferent splitting algorithms, or being able to save a splitting and edit it if it\u0027s close but not quite what the user would like.",
      "parentUuid": "d3fdcf3f_c59fb754",
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ef6af1d_a85aca83",
        "filename": "split_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 3481761
      },
      "writtenOn": "2025-01-21T15:26:29Z",
      "side": 1,
      "message": "It seems like Mikel is in favor as auser",
      "parentUuid": "099d79c3_872cecd2",
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65fb6229_097a8699",
        "filename": "split_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1303432
      },
      "writtenOn": "2025-01-21T23:10:34Z",
      "side": 1,
      "message": "Yeah. I talked with the team. I think our stance has long been \"We don\u0027t really own git CL split and it\u0027s community maintained\" I think that is a weird stance to take and also be really strict on code reviews, though we should still you know, act as good reviewers for the basics of \"is this well written code\" even if we\u0027re not litigating features as much. I know you\u0027d like to do more, as long as you\u0027re responsive to user feedback/issues we (Source team) can review them faster. I think this is a very reasonable thing to try personally, and we have some signal that others like it too :).\n\nThanks for your patience.",
      "parentUuid": "6ef6af1d_a85aca83",
      "revId": "007fbcbab8e96c16c571191fda6c6f632fe9973e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}