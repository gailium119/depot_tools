{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eed867fe_30a4fb87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3481761
      },
      "writtenOn": "2025-02-06T17:36:04Z",
      "side": 1,
      "message": "While working on implementing sokcevic@\u0027s suggestion about the name of the \"Directories\" field, I discovered that the uploading algorithm uses the list of directories to name the branches that it uploads, which seems like a fundamentally flawed approach due to nondeterminism. This should address that and also make future changes easier.",
      "revId": "577fc09899f65a52dbd14ceed4da9e8a4f3d928c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38db6456_50e6dc43",
        "filename": "split_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2025-02-06T21:10:43Z",
      "side": 1,
      "message": "`hash` returns a signed integer, and probably not the best to be used. It may also be hard to track it if someone runs split twice for whatever reason. Perhaps just using abs(hash(...)) will do the trick.\n\nOnce nice thing about the current implementation is that a user can assume what branch contains just be looking at its name. With a hash, that\u0027s not possible.\n\nSome other options: use incremental integer in a format \u0027{prefix}_split_{n}\u0027, or generate a unique name from files",
      "revId": "577fc09899f65a52dbd14ceed4da9e8a4f3d928c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc401fe9_5080039a",
        "filename": "split_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 3481761
      },
      "writtenOn": "2025-02-06T21:44:57Z",
      "side": 1,
      "message": "\u003e It may also be hard to track it if someone runs split twice for whatever reason\n\nI\u0027m not sure what the concern here is, can you clarify? The hashes should be the same so long as the list of files is identical.\n\n\u003e ... abs(hash(...)) ...\n\nGood idea, will use this instead.\n\n\u003e Once nice thing about the current implementation is that a user can assume what branch contains just be looking at its name. With a hash, that\u0027s not possible.\n\nThis is definitely a downside, but I don\u0027t think it\u0027s very large, because the branches were already named semi-arbitrarily so you can\u0027t _really_ tell much just from the branch name.\n\n\u003e use incremental integer in a format \u0027{prefix}split{n}\u0027\n\nThe problem here is that you can\u0027t safely resume if they\u0027re named this way, since there isn\u0027t a relationship between the branch name and its contents (it also has the same downside as the hash of being unreadable to humans)\n\n\u003e generate a unique name from files\n\nThat\u0027s basically what I\u0027m doing with the hash, I just don\u0027t see a way to make it readable while preserving uniqueness and determinism of branch names.",
      "parentUuid": "38db6456_50e6dc43",
      "revId": "577fc09899f65a52dbd14ceed4da9e8a4f3d928c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}