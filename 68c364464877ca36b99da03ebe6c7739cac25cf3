{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9bbb956e_c89dd10c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2025-04-02T06:21:42Z",
      "side": 1,
      "message": "would you use the config files supported by the formatters?\ne.g., .clang-format-ignore, .rustfmt.toml, pyproject.toml, etc.\n\nUsing the git config is something we are trying to avoid. Ideally, devs should be able to run the format binaries directly. For example, they should be able to run the clang-format executable, bundled in depot_tools, to format CPP files.\n\nAlso, use of git-config for formatting configs also add unnecessary dependencies to the format tools. For example, in CoG workspace, we cannot use the git config.",
      "revId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44048b9d_d68da26d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2025-04-02T06:25:56Z",
      "side": 1,
      "message": "for the same reasons, chromium/src already has config files to exclude third_party packages in formatting.\n- https://source.chromium.org/chromium/chromium/src/+/main:.yapfignore\n- https://source.chromium.org/chromium/chromium/src/+/main:.rustfmt.toml;l\u003d22-26\n- https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/third_party/.clang-format",
      "parentUuid": "9bbb956e_c89dd10c",
      "revId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8358abf_617c807f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2025-04-02T06:36:28Z",
      "side": 1,
      "message": "The feature we want is to avoid formatting any vendored third party code in any cases, regardless of tools. We know currently some third_party directory are excluded case by case, but without this anytime someone adds a third_party dependencies outside common directories they may have to change multiple formatters\u0027 configs.\n\nWe want to enforce a policy that formatting on third_party code is not allowed (since it makes diff between upstream and local code useless) so a consistent way to config this is important.\n\nAlso, I understand git config is not available in CoG. Is there anything prevent git-cl reading from `codereview.settings` in that case?",
      "parentUuid": "44048b9d_d68da26d",
      "revId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85213de4_1abb71d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2025-04-02T06:55:55Z",
      "side": 1,
      "message": "\u003e We know currently some third_party directory are excluded case by case, but without this anytime someone adds a third_party dependencies outside common directories they may have to change multiple formatters\u0027 configs.\n\nI understand the concern, but I\u0027m not sure how the git-config would avoid the concern. What would be the path pattern set in the git config? I guess your team would want to preconfigure it with something like, `third_party/*`. Then, the same problem would still occur. If someone adds a new third_party dependency out of the common folder, you still need to update the git config to match the new third_party dependency. Updating the git config may feel easier than updating the format config files, but I don\u0027t think it\u0027s significantly better. git-cl-format supports a limited number of formatters, and many of them are using clang-format, such as .proto, .js, .TS, .CPP, and others. You don\u0027t need separate config for each of the languages for disabling all the formatting in a given folder.\n\nAlso, there is another issue with adding the special config that can only be recognized by git-cl-format. PRESUBMIT.py happens to validate formating by running the format binaries. However, if the git-config is only recognized by `git cl format` command, it\u0027d be difficult to ensure that `PRESUBMIT.py`` and `git cl format` would agree with each other. Furthermore, the exactly same issue exists between AyeAye/Tricium and the tooling. It\u0027s important that all the static analysis tools, including Aye, PRESUBMIT checks, and git cl format agree with each other.\n\nFor the same reasons, chromium/src already removed all the custom formatting configs hard-coded in PRESUBMIT.py to those canonical configuration files, such as .clang-format. As a result, it becomes much easier to ensure that formatting tools agree with each other however they are run, such as remotely with AyeAye or PRESUBMIT.py in tryjobs, or locally. Using the git config for ignoring pattern makes all these super difficult, and we have been trying to remove those in the past years.\n\n\u003e Also, I understand git config is not available in CoG. Is there anything prevent git-cl reading from codereview.settings in that case?\n\nIn the case, `codereview.settings` is being used as the .clang-format-ignore. First of all, if it\u0027s acceptable to hard-code the known third_party patterns into `codereview.settings` file, I don\u0027t see how it is different to hard-coding the patterns to .clang-format in chromium/src or in the rievetd git-config.",
      "parentUuid": "c8358abf_617c807f",
      "revId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0dbaeee_4f847409",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2025-04-02T10:03:54Z",
      "side": 1,
      "message": "ok, all these makes sense. I was also thinking what if someone\u0027s local IDE decided format on save since currently patch is not always separated from the vendored code. IIUC a large part of your concern is the difficulty to ensure all callers (e.g. `git cl format`, `PRESUBMIT.py`...) agree with each other to ensure consistency, while in this case our concerns become how to make all formaters agree with each other.\n\nMaybe an alternative solution can be a persubmit check to ensure all these language specific formatter agreed with each other. Also it\u0027s unclear to me whether a tool modifies all related top-level formatter configs is feasible.\n\nOr maybe since we may try to enforce a directory structure for all third-party dependencies, could we provide a tool to generate a set of formatter configs with `src/` so we can avoid a centralized config? one potential issue is third-party repos may contain their own formatter configs which could shadow our configs. @renewitt@google.com wdyt? we can start with putting configs under `third_party/`.",
      "parentUuid": "85213de4_1abb71d9",
      "revId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfd5b371_f1ea30ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1553262
      },
      "writtenOn": "2025-04-03T00:49:59Z",
      "side": 1,
      "message": "I think if we just narrow the scope to //third_party for now, to prove the concept, then that\u0027s a good start. As with everything, there\u0027s a lot of complexity and edge cases, but in order to make meaningful improvements let\u0027s start small.\n\nIdeally we would need:\n- a way to ensure third party code is not accidentally formatted\n- a way to identify if someone has formatted it so we don\u0027t fix and then backslide\n- to stop tools from autoformatting when they\u0027re run\n- to stop presubmits from telling people that they do need to format third party code\n- documentation about how we opt certain directories or file types out of formatting, so we can keep this healthy.\n\nA presubmit could be a good way to identify when something has been formatted, but what would we be checking it against? We have no way to know what tool was used to format the third party code - so what are the fail/pass conditions for the presubmit?\n\nI think we\u0027re going to be a while away from being able to force everything into a specific structure.\n\nFrom reading this thread, it seems like we can just opt to start with //third_party and put language specific opt out files for each one under that top level, or do we need to actually supply the non-formatting file in each child dependency dir? If the second, that does feel challenging to scale cleanly",
      "parentUuid": "b0dbaeee_4f847409",
      "revId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a3a68bb_8a29559f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2025-04-03T04:03:40Z",
      "side": 1,
      "message": "If the top level configs can work than configs under `//third_party` (not in each child dependency dir) should also work fine. This may be a good start point since: 1. we can test whether these configs can fufill our goal 2. avoid the extra hassle to manage per-dependency configs.\n\nTBC I\u0027m not saying this should relying on the dependency structure. We just need to take this into account when designing the structure if we decided go down this route.\n\nAnyway, abandon this CL and in favor of putting configs under `//third_party`.",
      "parentUuid": "bfd5b371_f1ea30ca",
      "revId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Admin-Approval",
        "description": {
          "value": "Changes to refs/meta/config must be approved by a git admin."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "(uploaderin:mdb/chrome-git-admins OR label:Code-Review\u003dMAX,group\u003dmdb/chrome-git-admins) AND label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"],"atomExplanations":{"value":{"branch:refs/meta/config":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"(uploaderin:mdb/chrome-git-admins OR label:Code-Review=MAX,group=mdb/chrome-git-admins) AND label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "patchSetCommitId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"],"atomExplanations":{"value":{"label:Code-Review=MAX,user=non_uploader":"","label:Code-Review=MIN":""}}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"],"atomExplanations":{"value":{"label:Bot-Commit=+1":"","label:Code-Review=MIN":""}}}
      },
      "patchSetCommitId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[],"atomExplanations":{"value":{"has:unresolved":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[],"atomExplanations":{"value":{"has:unresolved":""}}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*Unresolved-Comment-Reason:.*\""],"atomExplanations":{"value":{"message:\"^.*Unresolved-Comment-Reason:.*\"":""}}}
      },
      "patchSetCommitId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[],"atomExplanations":{"value":{"is:review-enforced_gerrit":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"],"atomExplanations":{"value":{"is:review-enforcement-satisfied_gerrit":"No approvals present"}}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"],"atomExplanations":{"value":{"is:false":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "68c364464877ca36b99da03ebe6c7739cac25cf3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}