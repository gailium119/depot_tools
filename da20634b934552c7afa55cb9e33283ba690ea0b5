{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "38bb4f01_2e6c06f8",
        "filename": "autoninja.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2025-04-04T07:05:46Z",
      "side": 1,
      "message": "Why do we need this?",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 70
      },
      "revId": "da20634b934552c7afa55cb9e33283ba690ea0b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c609e4f1_2719068a",
        "filename": "autoninja.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001939
      },
      "writtenOn": "2025-04-04T07:06:55Z",
      "side": 1,
      "message": "this is canonical way to detect root directory?",
      "parentUuid": "38bb4f01_2e6c06f8",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 70
      },
      "revId": "da20634b934552c7afa55cb9e33283ba690ea0b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49e9e868_7c37b7f3",
        "filename": "autoninja.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2025-04-04T07:29:48Z",
      "side": 1,
      "message": "I think this is not necessary if we don\u0027t know in which case this is necessary.",
      "parentUuid": "c609e4f1_2719068a",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 70
      },
      "revId": "da20634b934552c7afa55cb9e33283ba690ea0b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c900c2b7_4cd24884",
        "filename": "autoninja.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001939
      },
      "writtenOn": "2025-04-04T07:30:55Z",
      "side": 1,
      "message": "what do you mean?\nThis is the same code used in ninja.py etc to detect the location.",
      "parentUuid": "49e9e868_7c37b7f3",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 70
      },
      "revId": "da20634b934552c7afa55cb9e33283ba690ea0b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23dba3f2_442b1db2",
        "filename": "autoninja.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1577257
      },
      "writtenOn": "2025-04-04T07:32:34Z",
      "side": 1,
      "message": "I benchmarked it, because I didn\u0027t know if these calls do some expensive lookups:\n\n```\n\u003e\u003e\u003e print(timeit.timeit(\"has_internal_checkout()\", globals\u003dlocals()))\n20.49231304199202\n\u003e\u003e\u003e 20.492331304199202 / 1000000 * 1000\n0.0204923313041992\n```\n\nSo, if I\u0027m using and interpreting the output of `timeit` correctly, it takes just 0.02ms to run this function.",
      "parentUuid": "49e9e868_7c37b7f3",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 70
      },
      "revId": "da20634b934552c7afa55cb9e33283ba690ea0b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0aefbfde_09ca31f3",
        "filename": "autoninja.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001939
      },
      "writtenOn": "2025-04-04T07:36:18Z",
      "side": 1,
      "message": "hmm, other part in autoninja.py only checks GetPrimarySolutionPath?\n\nPTAL",
      "parentUuid": "23dba3f2_442b1db2",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 70
      },
      "revId": "da20634b934552c7afa55cb9e33283ba690ea0b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3c60efd_44f4ea17",
        "filename": "autoninja.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1577257
      },
      "writtenOn": "2025-04-04T07:39:18Z",
      "side": 1,
      "message": "I checked the `gclient_paths.py` code and it seems to attempt to handle a lot of potential cases that I don\u0027t think are relevant for Chromium. Should be fine to just use `gclient_paths.GetPrimarySolutionPath()` here. Either is fine with me (and looks like we could go through the code in depot_tools and try to understand / clean it up more widely, not just here.)",
      "parentUuid": "23dba3f2_442b1db2",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 70
      },
      "revId": "da20634b934552c7afa55cb9e33283ba690ea0b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}