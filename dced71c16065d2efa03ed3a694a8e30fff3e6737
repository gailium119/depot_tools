{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "50fdd0b9_0f08fd55",
        "filename": "gclient_scm.py",
        "patchSetId": 3
      },
      "lineNbr": 553,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2025-04-08T22:34:27Z",
      "side": 1,
      "message": "this looks mostly duplicated, let\u0027s make a helper for it.",
      "range": {
        "startLine": 550,
        "startChar": 0,
        "endLine": 553,
        "endChar": 68
      },
      "fixSuggestions": [
        {
          "fixId": "1302bc69_56875260",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "gclient_scm.py",
              "range": {
                "startLine": 490,
                "startChar": 0,
                "endLine": 491,
                "endChar": 0
              },
              "replacement": "                        file_list):        \n"
            },
            {
              "path": "gclient_scm.py",
              "range": {
                "startLine": 539,
                "startChar": 0,
                "endLine": 539,
                "endChar": 0
              },
              "replacement": "        def _update_mirror(target_rev):\n            url, _ \u003d gclient_utils.SplitUrlRevision(self.url)\n            mirror \u003d self._GetMirror(url, options, target_rev, target_rev)\n            if mirror:\n                rev_type \u003d \u0027branch\u0027 if target_rev.startswith(\n                    \u0027refs/\u0027) else \u0027hash\u0027\n                self._UpdateMirrorIfNotContains(mirror, options, rev_type,\n                                                target_rev)\n\n"
            },
            {
              "path": "gclient_scm.py",
              "range": {
                "startLine": 550,
                "startChar": 0,
                "endLine": 555,
                "endChar": 0
              },
              "replacement": "                _update_mirror(target_rev)\n"
            },
            {
              "path": "gclient_scm.py",
              "range": {
                "startLine": 559,
                "startChar": 0,
                "endLine": 566,
                "endChar": 0
              },
              "replacement": "            _update_mirror(target_rev)\n"
            }
          ]
        }
      ],
      "revId": "dced71c16065d2efa03ed3a694a8e30fff3e6737",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bfcad25_30b20f49",
        "filename": "gclient_scm.py",
        "patchSetId": 3
      },
      "lineNbr": 553,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2025-04-08T22:46:25Z",
      "side": 1,
      "message": "GetMirror()s are given different arguments. Hence, if we add a helper function, it\u0027d be like below\n\n```\ndef _updateMirrorIf(options, target_rev, fetch_spec):\n    url, _ \u003d ....\n    mirror \u003d self._GetMirror(URL, options, target_rev, fetch_spec)\n    if mirror:\n       self._Update(...)\n```\n\nI\u0027m a bit hesitant to make the wrapper, because there are at least 3 wrappers partly overlap and/or similar\n- _GetMirror(), and GetCacheMirror(), _updateMirrorIfNotContains().\n\nI considered moving `url, _ \u003d gclient_utils.SplitUrlRevision(..)` didn\u0027t want to make `url` into the upper scope, because it\u0027s only used by the _UpdateMirrorIfNotContains(), but the outer scope has a code referencing `self.url`. Hence, I\u0027d rather limit the scope of `url` inside the if statements.\n\nIn short, I am not sure if adding a simple wrapper for this particular case would be useful in other cases, and I\u0027d rather put them as they are now. If we want to make this block more readable and simpler, then I\u0027d rather refactor the entire block, other than making a small wrapper that reduces a couple of lines.",
      "parentUuid": "50fdd0b9_0f08fd55",
      "range": {
        "startLine": 550,
        "startChar": 0,
        "endLine": 553,
        "endChar": 68
      },
      "revId": "dced71c16065d2efa03ed3a694a8e30fff3e6737",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Admin-Approval",
        "description": {
          "value": "Changes to refs/meta/config must be approved by a git admin."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "(uploaderin:mdb/chrome-git-admins OR label:Code-Review\u003dMAX,group\u003dmdb/chrome-git-admins) AND label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"],"atomExplanations":{"value":{"branch:refs/meta/config":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"(uploaderin:mdb/chrome-git-admins OR label:Code-Review=MAX,group=mdb/chrome-git-admins) AND label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "patchSetCommitId": "dced71c16065d2efa03ed3a694a8e30fff3e6737",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"],"atomExplanations":{"value":{"label:Code-Review=MAX,user=non_uploader":"","label:Code-Review=MIN":""}}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"],"atomExplanations":{"value":{"label:Bot-Commit=+1":"","label:Code-Review=MIN":""}}}
      },
      "patchSetCommitId": "dced71c16065d2efa03ed3a694a8e30fff3e6737",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"],"atomExplanations":{"value":{"has:unresolved":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "patchSetCommitId": "dced71c16065d2efa03ed3a694a8e30fff3e6737",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[],"atomExplanations":{"value":{"is:review-enforced_gerrit":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[],"atomExplanations":{"value":{"is:review-enforcement-satisfied_gerrit":"Required approval count satisfied"}}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "dced71c16065d2efa03ed3a694a8e30fff3e6737",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"],"atomExplanations":{"value":{"is:false":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "dced71c16065d2efa03ed3a694a8e30fff3e6737",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}